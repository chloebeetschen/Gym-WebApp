# Calendar of all sessions
@app.route('/calendar', methods=['GET', 'POST'])
@login_required
def calendarMethod():
    logging.debug("Calendar route request")
    today = datetime.now()

    #week span
    weeks = [today, (today + timedelta(days=1)), (today + timedelta(days=2)), (today + timedelta(days=3)), (today + timedelta(days=4)), (today + timedelta(days=5)), (today + timedelta(days=6)), (today + timedelta(days=7)), (today + timedelta(days=8)), (today + timedelta(days=9)), (today + timedelta(days=10)), (today + timedelta(days=11)), (today + timedelta(days=12)), (today + timedelta(days=13))]
    #days of week integers, from today
    
    #calculation for making sure we only get 2 weeks of data
    w1 = datetime.now()+timedelta(days=6)
    w2 = datetime.now()+timedelta(days=13)
    
    # get all events in order of date and time w1 and w2
    events = Calendar.query.filter(Calendar.aDateTime >= datetime.now()).filter(Calendar.aIsRepeat==False).filter(Calendar.aDateTime < w1).order_by(Calendar.aDateTime).all()
    events2 = Calendar.query.filter(Calendar.aDateTime >= w1).filter(Calendar.aDateTime < w2).filter(Calendar.aIsRepeat==False).order_by(Calendar.aDateTime).all()

    userBooked1 = []
    userBooked2 = []
    weeksCount = [0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    dateWeeks = [d.date() for d in weeks]

    # get event type for each event found
    eventInfo = []
    eventPrices = []
    for i in events:
        # Find the index of day in weeks list
        index = dateWeeks.index((i.aDateTime).date())
        weeksCount[index] +=1
        roundedPrice = "%0.2f" % i.aPrice
        eventPrices.append(roundedPrice)
        eventInfo.append(Activity.query.filter_by(id=i.activityId).first())
        # For every event check if user has booked it
        if 'proxyBooking' in session :
            for id in session['proxyBooking']:
                booked = UserBookings.query.filter_by(userId=id, calendarId=i.id).first()
        else:
            booked = UserBookings.query.filter_by(userId=current_user.id, calendarId=i.id).first()
        
        if booked is not None:   
            userBooked1.append(True)
        else:
            userBooked1.append(False)
        

    # get event type for each event found
    eventInfo2 = []
    eventPrices2 = []
    for i in events2:
        # Find the index of day in weeks list
        index = dateWeeks.index((i.aDateTime).date())
        weeksCount[index] +=1
        roundedPrice = "%0.2f" % i.aPrice
        eventPrices2.append(roundedPrice)
        eventInfo2.append(Activity.query.filter_by(id=i.activityId).first())
        # For every event check if user has booked it
        if 'proxyBooking' in session :
            for id in session['proxyBooking']:
                booked = UserBookings.query.filter_by(userId=id, calendarId=i.id).first()
        else:
            booked = UserBookings.query.filter_by(userId=current_user.id, calendarId=i.id).first()
        if booked is not None:
            userBooked2.append(True)
        else:
            userBooked2.append(False)


    if 'proxyBooking' in session :
        for id in session['proxyBooking']:
            user = UserDetails.query.filter_by(id=id).first()
    else:
        user = UserDetails.query.filter_by(id=current_user.id).first()

    if 'proxyBooking' in session:
        return render_template('calendar.html',
                            title     = 'Calendar',
                            numEvents = len(events),
                            numEvents2 = len(events2),
                            events    = events,
                            eventInfo = eventInfo,
                            eventPrices = eventPrices,
                            events2    = events2,
                            eventInfo2 = eventInfo2,
                            eventPrices2 = eventPrices2,
                            isMember = True,   
                            weeks     = weeks,
                            userBooked1 = userBooked1,
                            userBooked2 = userBooked2,
                            proxyBooking = True,
                            weeksCount = weeksCount
                            )
    else:
        return render_template('calendar.html',
                            title     = 'Calendar',
                            numEvents = len(events),
                            numEvents2 = len(events2),
                            events    = events,
                            eventInfo = eventInfo,
                            events2    = events2,
                            eventPrices = eventPrices,
                            eventPrices2 = eventPrices2,
                            eventInfo2 = eventInfo2,
                            isMember = user.isMember,   
                            weeks     = weeks,
                            userBooked1 = userBooked1,
                            userBooked2 = userBooked2,
                            weeksCount=weeksCount
                            )